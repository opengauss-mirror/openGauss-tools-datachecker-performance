<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.opengauss.datachecker.extract.data.mapper.OpgsMetaDataMapper">
    <resultMap id="tableMetadataMap" type="org.opengauss.datachecker.common.entry.extract.TableMetadata">
        <id property="tableName" column="tableName"/>
        <result property="schema" column="nspname"/>
        <result property="tableRows" column="tableRows"/>
        <result property="avgRowLength" column="avgRowLength"/>
    </resultMap>

    <resultMap id="columnMetadataMap" type="org.opengauss.datachecker.common.entry.extract.ColumnsMetaData">
        <id property="tableName" column="tableName"/>
        <result property="schema" column="tableSchema"/>
        <result property="columnName" column="columnName"/>
        <result property="ordinalPosition" column="ordinalPosition"/>
        <result property="dataType" column="dataType"/>
        <result property="columnType" column="columnType"/>
        <result property="extra" column="extra"/>
    </resultMap>

    <resultMap id="primaryColumnBeanMap" type="org.opengauss.datachecker.common.entry.extract.PrimaryColumnBean">
        <id property="tableName" column="tableName"/>
        <result property="columnName" column="columnName"/>
    </resultMap>

    <select id="sqlMode" resultType="String">
         SHOW sql_mode;
    </select>

    <select id="dolphinSqlMode" resultType="String">
         show dolphin.sql_mode;;
    </select>

    <select id="health" resultType="boolean">
         SELECT 1
    </select>

    <select id="queryTableNameList" resultType="string">
        select c.relname tableName from pg_class c
            LEFT JOIN pg_namespace n on n.oid = c.relnamespace
            left join pg_index b on c.oid=b.indrelid
        where n.nspname=#{schema} and b.indisprimary='t';
    </select>

    <select id="queryTableMetadataList" resultMap="tableMetadataMap">
        select n.nspname , c.relname tableName,c.reltuples tableRows, case when c.reltuples>0 then pg_table_size(c.oid)/c.reltuples else 0 end as avgRowLength
        from pg_class c LEFT JOIN pg_namespace n on n.oid = c.relnamespace left join pg_index b on c.oid=b.indrelid
        where n.nspname=#{schema} and b.indisprimary='t';
    </select>

    <select id="queryTableMetadata" resultMap="tableMetadataMap">
        select n.nspname , c.relname tableName,c.reltuples tableRows, case when c.reltuples>0 then pg_table_size(c.oid)/c.reltuples else 0 end as avgRowLength
        from pg_class c LEFT JOIN pg_namespace n on n.oid = c.relnamespace left join pg_index b on c.oid=b.indrelid
        where n.nspname=#{schema} and c.relname=#{name} and b.indisprimary='t';
    </select>

    <select id="queryTableColumnsMetaData" resultMap="columnMetadataMap">
       SELECT col.table_schema tableSchema, col.table_name tableName,col.column_name columnName,
              col.ordinal_position ordinalPosition,col.data_type dataType,col.udt_name columnType
        from information_schema.columns col
        where col.table_schema=#{schema} and col.table_name =#{name} order by col.ordinal_position asc;
    </select>

    <select id="queryTablePrimaryColumns" resultMap="primaryColumnBeanMap">
       select tc.table_schema,tc.table_name tableName,tc.constraint_type,c.column_name columnName
       from information_schema.table_constraints tc left join information_schema.key_column_usage c on tc.constraint_name=c.constraint_name
       where tc.constraint_type='PRIMARY KEY' and tc.table_schema=#{schema};
    </select>

    <select id="queryTablePrimaryColumnsByTableName" resultMap="primaryColumnBeanMap">
       select tc.table_name tableName,c.column_name columnName from information_schema.table_constraints tc
       left join information_schema.key_column_usage c on tc.constraint_name=c.constraint_name and tc.table_schema=c.table_schema
       where tc.constraint_type='PRIMARY KEY' and tc.table_schema=#{schema} and tc.table_name =#{name} ;
    </select>

    <select id="rowCount" resultType="long">
        select count(1) from ${schema}.${name};
    </select>

    <select id="min" resultType="string">
         select min(${param.colName}) from ${param.schema}.${param.name}
    </select>

    <select id="max" resultType="string">
         select max(${param.colName}) from ${param.schema}.${param.name}
    </select>

    <select id="next" resultType="string">
         select ${param.colName} from ${param.schema}.${param.name} where ${param.colName} >= #{param.preValue} order by ${param.colName} asc limit #{param.offset} ,1
    </select>

    <select id="queryPointList" resultType="string">
        select s.${param.colName}
        from ( select row_number() over(order by r.${param.colName} asc) as rn,r.${param.colName} from ${param.schema}.${param.name}  r ) s
        where mod(s.rn, #{param.offset}) = 0
    </select>

    <select id="checkDatabaseNotEmpty" resultType="boolean">
        select exists (select info.table_name from  information_schema.tables info where  table_schema=#{schema} limit 1) exist_table
    </select>
</mapper>