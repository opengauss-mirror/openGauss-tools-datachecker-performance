server:
  port: 9000
  shutdown: graceful
logging:
  config: classpath:./config/log4j2.xml
debug: false
spring:
  memory-monitor-enable: false
  check:
    core-pool-size: 2
    maximum-pool-size: 10
  application:
    name: gs_datacheck
  config:
    additional-location: file:config/application.yml
  lifecycle:
    timeout-per-shutdown-phase: 5
  kafka:
    consumer:
      group-id: checkgroup
      enable-auto-commit: true
      auto-commit-interval: 100
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      fetch-min-size: 1
      max-poll-records: 20000
      request-timeout-ms: 300000
      fetch-max-bytes: 536870912  # 512M



data:
  check:
    data-path: local_path/xxx
    bucket-expect-capacity: 10
    health-check-api: /extract/health
    statistical-enable: false
    # auto-clean-environmentï¼š Configure whether to automatically clean the execution environment.
    # If set to true, the environment will be cleaned automatically after the full verification process is completed.
    auto-clean-environment: true
    check-with-sync-extracting: true
    retry-fetch-record-times: 5
    error-rate: 30
    max-retry-times: 1000
    retry-interval-times: 1000
    # auto-delete-topic :  Configure whether to automatically delete topic.
    # 0 is not delete; 1 is delete when checked all completed ; 2 is deleted when checked a table
    auto-delete-topic: 2
    increment-max-diff-count: 10

rules:
  # There are three types of filtering rules: table-level rules, row-level rules, and column-level rules.
  # Rules are configured in the form of List collection.
  # filter rule switch: enable=true enables the filter rule, and enable=false closes the filter rule
  enable: false
  # Table level verification and filtering: filter the current database table by configuring a black and white list.
  # The black and white list configuration is mutually exclusive, that is, the black and white list cannot be configured at the same time.
  # If the black and white list is configured at the same time, only the white list will take effect.
  # black and white list configuration rules must:
  # The configured name must be white or black, otherwise the rule is invalid, and we will automatically filter the invalid rule
  # If the configured TEXT is not a regular expression, the rule is invalid and will be filtered automatically
  # If the configured TEXT is empty, the rule is invalid and will be filtered automatically
  # If the configured TEXT is duplicate, the rule item will automatically filter the duplicates.
  table:
  #  - name: white
  #    text: ^[a-zA-Z][a-zA-Z_]+$
  #  - name: white
  #    text: ^[a-zA-Z]+$a-zA-Z_]+$
  #  - name: white
  #    text: ^[a-zA-Z][a-zA-Z0-9_]+$
  #  - name: black
  #    text: ^[a-zA-Z][a-zA-Z_]+$
  # Row level filtering is to filter the records that need to be verified in all table by adding rules.
  # Sort the table data in ascending order according to the primary key, and obtain the records to be verified ,
  # query quantity, and offset information configured by the user.
  # If table rule and row rule are configured at the same time, row rule will be adapted based on table rule
  # We configure a row rule: regex: 10,100.
  # If the table name is table_name, the primary key is id, then the current table is filtered at the row level,
  # and the equivalent SQL is select * from table_name order by id asc limit 10 , 100
  # row configuration rules must:
  # If the configured text is not match the regular expression ^\d+(\,\d+), then the rule is invalid and will be filtered automatically
  # If the configured name is not a regular expression, the rule is invalid and will be filtered automatically
  # If the configured name is empty, the rule is invalid and will be filtered automatically
  # If the configured name is duplicate, the rule item will automatically filter the duplicates.
  row:
  #  - name: ^[a-zA-Z][a-zA-Z_]+$
  #    text: 10,100
  #  - name: ^[a-zA-Z][a-zA-Z_]+$
  #    text: 100,100
  #  - name: ^[a-zA-Z]+$a-zA-Z_]+$
  #    text: 100,300
  #  - name: ^[a-zA-Z]+$
  #    text: 10a,100
  #  - name: ^[a-zA-Z][a-zA-Z0-9_]+$
  #    text: 10,100
  # Column level filtering is to filter the fields that need to be verified in the current table by adding rules to the table.
  # Column level filtering includes two rules: inclusion rules and exclusive rules.
  # Including rules means that only the configured field list is verified, and exclusive rules means that the configured field list is not verified.
  # Inclusion rules and exclusive rules are mutually exclusive rules.
  # Inclusion rules and exclusive rules cannot be configured in the same table at the same time, otherwise the rule will not take effect.
  # When we verify the table data, we require that the table must contain a primary key.
  # Therefore, if the primary key field is not configured in the inclusion rule, we will automatically add the primary key column to the inclusion rule.
  # In addition, if the primary key field is configured in the exclusion rule, we will automatically delete the primary key column from the exclusion rule
  # Column level filter rule configuration:
  #   name: table_name
  #   text: field1,field2,...field
  #   attribute: include
  # If the configured name is empty, the rule is invalid and will be filtered automatically
  # If the configured name is duplicate, the rule item will automatically filter the duplicates.
  # If the configured attribute cannot include or exclude, the rule is invalid, and we will automatically filter the invalid rule
  column:
  #  - name: t_test_1
  #    text: id,portal_id,func_id,name,width,last_upd_time
  #    attribute: include
  #  - name: t_test_2
  #    text: id,portal_id,func_id,name
  #    attribute: include
  #  - name: t_test_2
  #    text: name,height,last_upd_time,last_upd_time
  #    attribute: include
  #  - name: t_test_4
  #    text: name,height,last_upd_time
  #    attribute: exclude
